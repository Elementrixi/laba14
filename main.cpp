#include<iostream>#include<conio.h>#include<cstdio>#include<cstring>#include<iomanip>#define DoubleNL endl<<endl#define Getch puts("Getch")#define DONE //DONEusing namespace std;struct TopPosition {    char topPosName[30];    int topSalary;};struct Position {    char posName[30];    char requirements[50];};struct Employee {    char lastName[20];    int salary;};struct Company {    char companyName[20];    Position position;    int amountOfEmpl;    Employee employeeCand[10];};struct CompanyWithTopPos {    char companyName[20];    TopPosition position;    int amountOfEmpl;    Employee employeeCand[10];};int jEmp, iPos, globSize = 0;FILE *fp;DONEvoid initPos() {    Company companies[10];    char positionAns;    if (fp != nullptr) remove("fp.dat");    else {        fp = fopen("fp.dat", "wb");        iPos = globSize;        do {            cout << "Company name\n";            cin >> companies[iPos].companyName;            cout << "Position\n";            cin >> companies[iPos].position.posName;            cout << "Amount of positions\n";            cin >> companies[iPos].amountOfEmpl;            cout << "Requirements    " << iPos << endl;            cin >> companies[iPos].position.requirements;            jEmp = 0;            int k = companies[iPos].amountOfEmpl;            do {                cout << "Employee candidate last name\n";                cin >> companies[iPos].employeeCand[jEmp].lastName;                cout << "Salary    " << jEmp << endl;                cin >> companies[iPos].employeeCand[jEmp].salary;                jEmp++;                k--;            } while (k != 0);            cout << "Cont input? y/n\n";            cin >> positionAns;            fwrite(&companies[iPos], sizeof(Company), 1, fp);            iPos++;        } while (positionAns != 'n');        globSize = iPos;        fclose(fp);    }    Getch;    getch();}DONEvoid listOfPos() {    Company company{};    if (!(fp = fopen("fp.dat", "rb"))) cerr << "NONE";    else {        fread(&company, sizeof(Company), 1, fp);        while (!feof(fp)) {            cout << setw(12) << company.companyName << setw(12) << company.position.posName << setw(12)                 << company.position.requirements << endl;            fread(&company, sizeof(Company), 1, fp);        }        fclose(fp);    }    Getch;    getch();}DONEvoid listOfEmpl() {    Company company{};    if (!(fp = fopen("fp.dat", "rb")))//перевірка існування файлу при відкритті    {        cerr << "File do not exist!";    } else {        fread(&company, sizeof(Company), 1, fp); //читання даних з 1 предмету        while (!feof(fp)) {            cout << company.position.posName << endl;            for (jEmp = 0; jEmp < company.amountOfEmpl; ++jEmp) {                cout << "      " << setw(12) << company.employeeCand[jEmp].lastName << setw(12)                     << company.employeeCand[jEmp].salary << endl;            }            fread(&company, sizeof(Company), 1, fp);//читання даних з 1 предмету        }        fclose(fp); //закриття файлу    }    Getch;    getch();}DONEvoid outputOfFile() {    Company company{};    if (!(fp = fopen("fp.dat", "rb"))) cerr << "File doesn't exist(\n";    else {        fread(&company, sizeof(Company), 1, fp);        cout << "It is file:\n";        while (!feof(fp)) {            cout << "Company     Position    Amount    Requirements\n";            cout.setf(ios::left);            cout << setw(12) << company.companyName << setw(12) << company.position.posName << setw(13)                 << company.amountOfEmpl                 << setw(12) << company.position.requirements << DoubleNL;            cout << "Number    Last name      Salary\n";            for (jEmp = 0; jEmp < company.amountOfEmpl; ++jEmp) {                cout.setf(ios::left);                cout << setw(10) << jEmp + 1 << setw(16) << company.employeeCand[jEmp].lastName                     << company.employeeCand[jEmp].salary                     << DoubleNL;            }            fread(&company, sizeof(Company), 1, fp);        }        fclose(fp);    }    Getch;    getch();}DONEvoid outputCompanyWithBiggestAmountOfEmployeeOnPos(const char position[]) {    Company company{};    int max = -1;    char array[50];    if (!(fp = fopen("fp.dat", "rb"))) cerr << "An error occurred";    else {        fread(&company, sizeof(Company), 1, fp);        cout << setw(12) << "Output company with the biggest amount of employees on the position " << position             << DoubleNL;        while (!feof(fp)) {            if (!strcmp(company.position.posName, position)) {                if (company.amountOfEmpl > max) {                    max = company.amountOfEmpl;                    strcpy(array, company.companyName);                }            } else {                puts("No such position");                return;            }            fread(&company, sizeof(Company), 1, fp);        }        cout << array << " with employees amount " << max << DoubleNL;        fclose(fp);    }    Getch;    getch();}DONEvoid outputRequirementsOfPos(const char position[]) {    Company company{};    if(strlen(company.companyName) == 0) {}    if (!(fp = fopen("fp.dat", "rb"))) cerr << "An error occurred";    else {        fread(&company, sizeof(Company), 1, fp);        while (!feof(fp)) {            if (!strcmp(company.position.posName, position)) {                cout << setw(12) << "Output requirements to employees on the position\n";                cout << setw(12) << company.companyName << setw(12) << company.position.posName << setw(12)                     << company.position.requirements << endl;            } else {                puts("No such position");                return;            }            fread(&company, sizeof(Company), 1, fp);        }        fclose(fp);    }    Getch;    getch();}DONEvoid initWithTopPos() {    Company companyOld{};    CompanyWithTopPos companyNew[globSize];    int salary = 0;    if (!(fp = fopen("fp.dat", "rb"))) cerr << "An error occurred";    else {        fp = fopen("fp.dat", "rb");        fread(&companyOld, sizeof(Company), 1, fp);        for (iPos = 0; iPos <= globSize; iPos++) {            strcpy(companyNew[iPos].companyName, companyOld.companyName);            companyNew[iPos].amountOfEmpl = companyOld.amountOfEmpl;            strcpy(companyNew[iPos].position.topPosName, companyOld.position.posName);            companyNew[iPos].position.topSalary = companyOld.employeeCand->salary;            for (jEmp = 0; jEmp < companyNew[iPos].amountOfEmpl; ++jEmp) {                strcpy(companyNew[iPos].employeeCand[jEmp].lastName, companyOld.employeeCand[jEmp].lastName);                companyNew[iPos].employeeCand[jEmp].salary = companyNew[iPos].position.topSalary;                salary += companyOld.employeeCand[jEmp].salary;            }            companyNew[iPos].position.topSalary = salary / 2;            salary = 0;            fread(&companyOld, sizeof(Company), 1, fp);        }        fclose(fp);        fp = fopen("fp.dat", "wb");        for (iPos = 0; iPos < globSize; iPos++) {            fwrite(&companyNew[iPos], sizeof(CompanyWithTopPos), 1, fp);        }        fclose(fp);        Getch;        getch();    }}DONEvoid outputOfFileNew() {    CompanyWithTopPos company{};    if (!(fp = fopen("fp.dat", "rb"))) cerr << "File doesn't exist(\n";    else {        fread(&company, sizeof(CompanyWithTopPos), 1, fp);        cout << "It is file:\n";        while (!feof(fp)) {            cout << "Company     Position    Amount    Position salary\n";            cout.setf(ios::left);            cout << setw(12) << company.companyName << setw(12) << company.position.topPosName << setw(13)                 << company.amountOfEmpl                 << setw(12) << company.position.topSalary << DoubleNL;            cout << "Number    Last name\n";            for (jEmp = 0; jEmp < company.amountOfEmpl; ++jEmp) {                cout.setf(ios::left);                cout << setw(10) << jEmp + 1 << setw(16) << company.employeeCand[jEmp].lastName << DoubleNL;            }            fread(&company, sizeof(CompanyWithTopPos), 1, fp);        }        fclose(fp);    }    Getch;    getch();}int main() {    char position[50];    int ch;    do {        puts("1) Init position  2) Output file 3) All positions 4) All employees"             "\n5) Output company with the biggest amount of employee on position\n6) Output requirements of position  "             "7) Recreate file  8) Output new file 0) Exit");        cin >> ch;        switch (ch) {            case 1: {                initPos();                break;            }            case 2: {                outputOfFile();                break;            }            case 3: {                listOfPos();                break;            }            case 4: {                listOfEmpl();                break;            }            case 5: {                puts("Input position");                cin >> position;                outputCompanyWithBiggestAmountOfEmployeeOnPos(position);                break;            }            case 6: {                puts("Input position");                cin >> position;                outputRequirementsOfPos(position);                break;            }            case 7: {                initWithTopPos();                break;            }            case 8:{                outputOfFileNew();                break;            }            case 0: {                cout << "Exiting...";            }            default: {                puts("Invalid input try again!");            }        }    } while (ch != 0);    cout << "//////////\n\n";    /*cout << "input pos\n";    cin >> position;    outputCompanyWithBiggestAmountOfEmplOnPos(position);*/    cout << "\n///////////\n";    return 0;}