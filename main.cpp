#include<iostream>#include<conio.h>#include<cstdlib>#include<cstdio>#include<cstring>#include<iomanip>#define TripleNL endl<<endl<<endl#define DoubleNL endl<<endl#define Getch puts("Getch")#define DONE //DONEusing namespace std;struct Position {    char posName[30];    char requirements[50];};struct Employee {    char lastName[20];    int salary;};struct Company {    //int amountOfPos;    char companyName[20];    Position position;    int amountOfEmpl;    Employee employeeCand[10];};int jEmp, iPos;FILE *fp;DONEvoid initProp() {    Company companies[10];    char employeeAns, positionAns;    if (fp != nullptr) remove("fp.dat");    else {        fp = fopen("fp.dat", "wb");        iPos = 0;        do {            cout << "Company name\n";            cin >> companies[iPos].companyName;            cout << "Position\n";            cin >> companies[iPos].position.posName;            cout << "Amount of positions\n";            cin >> companies[iPos].amountOfEmpl;            cout << "Requirements    " << iPos << endl;            cin >> companies[iPos].position.requirements;            jEmp = 0;            int k = companies[iPos].amountOfEmpl;            do {                cout << "Employee candidate last name\n";                cin >> companies[iPos].employeeCand[jEmp].lastName;                cout << "Salary    " << jEmp << endl;                cin >> companies[iPos].employeeCand[jEmp].salary;                jEmp++;                /*cout<<"Add one more employee? y/n\n";                employeeAns = getch();*/                k--;            } while (k != 0/*employeeAns != 'n'*/);            /*for (jEmp = 0;  jEmp < companies[iPos].amountOfEmpl ; jEmp++) {                cout << "      " << setw(12) << companies[iPos].employeeCand[jEmp].lastName << setw(12)                     << companies[iPos].employeeCand[jEmp].salary << endl;            }*/            //companies[iPos].amountOfEmpl = jEmp;            cout << "Cont input? y/n\n";            cin >> positionAns;// = getch();            fwrite(&companies[iPos], sizeof(Company), 1, fp);            iPos++;        } while (positionAns != 'n');        fclose(fp);    }    Getch;    getch();}DONEvoid listOfPos() {    Company company{};    if (!(fp = fopen("fp.dat", "rb"))) cerr << "NONE";    else {        fread(&company, sizeof(Company), 1, fp);        while (!feof(fp)) {            //cout.setf(ios::left);            cout << company.companyName << setw(12) << company.position.posName << setw(12)                 << company.position.requirements << setw(12) << endl;            fread(&company, sizeof(Company), 1, fp);        }        fclose(fp);    }    Getch;    getch();}DONEvoid listOfEmpl() {    Company company{};    if (!(fp = fopen("fp.dat", "rb")))//перевірка існування файлу при відкритті    {        cerr << "File do not exist!";    } else {        fread(&company, sizeof(Company), 1, fp); //читання даних з 1 предмету        while (!feof(fp)) {            cout << company.position.posName << endl;            for (jEmp = 0; jEmp < company.amountOfEmpl; ++jEmp) {                //cout.setf(ios::left);                cout << "      " << setw(12) << company.employeeCand[jEmp].lastName << setw(12)                     << company.employeeCand[jEmp].salary << endl;            }            fread(&company, sizeof(Company), 1, fp);//читання даних з 1 предмету        }        fclose(fp); //закриття файлу    }    Getch;    getch();}DONEvoid outputOfFile() {    Company company{};    if (!(fp = fopen("fp.dat", "rb"))) cerr << "File doesn't exist(\n";    else {        fread(&company, sizeof(Company), 1, fp);        cout << setw(20) << "It is file:\n";        while (!feof(fp)) {            cout << "Company     Position    Amount    Requirements\n";            cout.setf(ios::left);            cout << setw(12) << company.companyName << setw(12) << company.position.posName << setw(13)                 << company.amountOfEmpl                 << setw(12) << company.position.requirements << DoubleNL;            cout << "Last name      Salary\n";            for (jEmp = 0; jEmp < company.amountOfEmpl; ++jEmp) {                cout.setf(ios::left);                cout << setw(12) << company.employeeCand[jEmp].lastName << setw(12) << company.employeeCand[jEmp].salary                     << TripleNL;            }            fread(&company, sizeof(Company), 1, fp);        }        fclose(fp);    }    Getch;    getch();}DONEvoid outputCompanyWithBiggestAmountOfEmplOnPos(const char position[]) {    Company company{};    int max = -1, maxSup = -1;    char array[50], array1[50];    if (!(fp = fopen("fp.dat", "rb"))) cerr << "An error occurred";    else {        fread(&company, sizeof(Company), 1, fp);        cout << setw(12) << "Output company with the biggest amount of employees on the position " << position             << DoubleNL;        while (!feof(fp)) {            if (!strcmp(company.position.posName, position)) {                if (company.amountOfEmpl > max) {                    max = company.amountOfEmpl;                    maxSup = max;                    strcpy(array, company.companyName);                } else if (max == maxSup) {                    strcpy(array1, company.companyName);                }            }            fread(&company, sizeof(Company), 1, fp);        }        cout << array << " with employees amount " << max << DoubleNL;        if (strlen(array1) != 0) cout << array1 << " with employees amount " << maxSup << DoubleNL;        fclose(fp);    }    getch();}DONEvoid outputRequirOfPos(const char position[]) {    Company company{};    if (!(fp = fopen("fp.dat", "rb"))) cerr << "An error occurred";    else {        fread(&company, sizeof(Company), 1, fp);        cout << setw(12) << "Output requirements to employees on the position\n";        while (!feof(fp)) {            if (!strcmp(company.position.posName, position)) {                cout << setw(12) << company.companyName << setw(12) << company.position.posName << setw(12)                     << company.position.requirements << endl;            }            fread(&company, sizeof(Company), 1, fp);        }        fclose(fp);    }    Getch;    getch();}int main() {    char position[50];    initProp();    cout << "//////////\n\n";    cout << "input pos\n";    cin >> position;    outputCompanyWithBiggestAmountOfEmplOnPos(position);    cout << "\n///////////\n";    outputOfFile();    return 0;}